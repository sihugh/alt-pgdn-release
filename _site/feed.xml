<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alt-PgDn</title>
    <description>Alt-PgDn is the Resharper keyboard shortcut for &quot;Proceed to next issue&quot;. This is a collection of programming tidbits, deployment issues and other techy bits and pieces I find interesting.
</description>
    <link>http://staging.alt-pgdn.com/</link>
    <atom:link href="http://staging.alt-pgdn.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 13 Aug 2015 10:37:19 +0000</pubDate>
    <lastBuildDate>Thu, 13 Aug 2015 10:37:19 +0000</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Client side caching and blob caching</title>
        <description>&lt;h2 id=&quot;key-bits&quot;&gt;Key Bits&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Cache on client side to take load off database, web front ends and networks.&lt;/li&gt;
  &lt;li&gt;The trade-off is that content may no longer be up to date.&lt;/li&gt;
  &lt;li&gt;Published pages are cached for 3 minutes in Browse and not cached in Auth&lt;/li&gt;
  &lt;li&gt;Content in “_layouts” is cached for 365 days
  – Use this for content that will only change at release intervals (due to the fact that it is stored separately on each web front end so is a pain to update)
  – Use the “Fingerprint.Tag()” method in the “Utility” project to ensure that the newest versions of layouts files are served.
  – Easy to update source files in Dev!
  – Not subject to Blob Cache&lt;/li&gt;
  &lt;li&gt;Some content in libraries is cached for 1 day
  – Use this for content that you may need to update between releases (due to the fact that you only have to modify it in one place)
  – A pain to update source files in Dev!
  – Subject to Blob Cache&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cache-control-header&quot;&gt;Cache-Control Header&lt;/h2&gt;

&lt;p&gt;The Cache-Control header has two elements to it:
 - public / private
  – This states whether or not proxy servers between the web server and the client should serve this content to different users requesting the same resource.
 - max-age=(a time in seconds)
  – How long the end client should store and use this cached version for.&lt;/p&gt;

&lt;h2 id=&quot;pages-behaviour&quot;&gt;Pages Behaviour&lt;/h2&gt;

&lt;p&gt;Pages contain most of the information (i.e. the text) that the rendered result displays.  When an author is modifying the page, they must see the “real” version of the content.  We are more able to cache content for consumers.&lt;/p&gt;

&lt;p&gt;Pages are also the things that all the other assets are linked to (e.g. images, scripts, styles etc.).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Page caching is configured in “/_layouts/sitecachesettings.aspx”&lt;/li&gt;
  &lt;li&gt;Browse is set to cache for 3 minutes (I think we could be more aggressive with this).&lt;/li&gt;
  &lt;li&gt;Browse is set by default to “ServerAndPrivate” (results in the same as “private”).  We should set this to “public”!&lt;/li&gt;
  &lt;li&gt;Auth is set to not cache (which makes sense)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;layouts-behaviour&quot;&gt;Layouts Behaviour&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The cache expiration is configured on the virtual directory in IIS and is set to 365 days.
  – Uses the following header “Cache-Control: max-age=31536000”
  – This is “public” by default which means that proxies can serve the same resource to multiple people without hitting the server&lt;/li&gt;
  &lt;li&gt;Content is stored solely on the file system&lt;/li&gt;
  &lt;li&gt;This may be over-ridden by using a “cache-busting” version tag when you link to assets (i.e. in the master page or page layouts)
  – My version of this is in Fingerprint.cs in the Utility project or in this Gist (also linked below).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;libraries-behaviour&quot;&gt;Libraries Behaviour&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Does not cache by default&lt;/li&gt;
  &lt;li&gt;“Blobcache” is enabled in web.config which caches gif, jpg, png, css, js and xml files which come from document libraries for 1 day (86400 seconds).
  – Blob cache is a designated area on each front end where SharePoint may store content which matches the blob cache configuration. 
  – It saves round trips to the database, but requires “flushing” when we make updates.  (Use the site maintenance tool)
  – We could configure it to cache more file types than we do… e.g. all image types&lt;/li&gt;
  &lt;li&gt;This can have some weird results ( http://www.sharepointnutsandbolts.com/2009/05/optimization-blob-caching-and-http-304s.html )&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;custom-pages&quot;&gt;Custom Pages&lt;/h2&gt;

&lt;p&gt;You can set your own headers, for which you’ll need to determine caching relevance.  For example, “alerts” are cached for 2 minutes client side.&lt;/p&gt;

&lt;h2 id=&quot;useful-links&quot;&gt;Useful Links&lt;/h2&gt;

&lt;p&gt;http://madskristensen.net/post/cache-busting-in-aspnet (Inspiration for my Fingerprint.cs below)&lt;/p&gt;

&lt;p&gt;http://www.sharepointnutsandbolts.com/2009/06/my-checklist-for-optimizing-sharepoint.html&lt;/p&gt;

&lt;p&gt;https://technet.microsoft.com/en-us/library/cc770229.aspx#BLOB (Blob cache settings)&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/020c160a6e02318aa934.js&quot;&gt; &lt;/script&gt;

</description>
        <pubDate>Wed, 13 May 2015 00:00:00 +0000</pubDate>
        <link>http://staging.alt-pgdn.com/performance/2015/05/13/client-side-caching.html</link>
        <guid isPermaLink="true">http://staging.alt-pgdn.com/performance/2015/05/13/client-side-caching.html</guid>
        
        
        <category>performance</category>
        
      </item>
    
      <item>
        <title>JS Snippet - Endswith</title>
        <description>&lt;p&gt;From: &lt;a href=&quot;http://stackoverflow.com/questions/280634/endswith-in-javascript&quot;&gt;http://stackoverflow.com/questions/280634/endswith-in-javascript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;   
function endsWith(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
}
&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Feb 2015 00:00:00 +0000</pubDate>
        <link>http://staging.alt-pgdn.com/js/2015/02/17/js-endswith.html</link>
        <guid isPermaLink="true">http://staging.alt-pgdn.com/js/2015/02/17/js-endswith.html</guid>
        
        
        <category>js</category>
        
      </item>
    
      <item>
        <title>Enabling Travis-CI build on Github-Pages site</title>
        <description>&lt;p&gt;Sign up for &lt;a href=&quot;https://travis-ci.org&quot;&gt;Travis-CI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to https://travis-ci.org/profile/#yourname# and turn CI on for your repo.&lt;/p&gt;

&lt;p&gt;Return to your Github pages repo and add a Gemfile including gihub-pages and html-proofer:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/54b62bb34dfba66cac23.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Add a .travis.yml file to build your Jekyll site and run htmlproofer against the generated content:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/78705cfd742e684bc113.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Edit your readme.md to include the build status image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;![build status](https://travis-ci.org/sihugh/sihugh.github.io.svg)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Commit and push&lt;/p&gt;

&lt;p&gt;… Wait for the build failure email telling you about the broken links on your sites… :-D&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Oct 2014 00:00:00 +0000</pubDate>
        <link>http://staging.alt-pgdn.com/build/2014/10/28/enable-travis-ci-build.html</link>
        <guid isPermaLink="true">http://staging.alt-pgdn.com/build/2014/10/28/enable-travis-ci-build.html</guid>
        
        
        <category>build</category>
        
      </item>
    
      <item>
        <title>Removing the Server header from Azure websites</title>
        <description>&lt;p&gt;To remove the Server header from Azure websites add the following section to system.webServer in the web.config
Local IIS will complain!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;security&amp;gt;
  &amp;lt;requestFiltering removeServerHeader =&quot;true&quot; /&amp;gt;
&amp;lt;/security&amp;gt;`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html&quot;&gt;Response headers via @troyhunt&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Sep 2014 00:00:00 +0000</pubDate>
        <link>http://staging.alt-pgdn.com/azure/2014/09/05/remove-azure-server-header.html</link>
        <guid isPermaLink="true">http://staging.alt-pgdn.com/azure/2014/09/05/remove-azure-server-header.html</guid>
        
        
        <category>azure</category>
        
      </item>
    
      <item>
        <title>Fixing IIS hangs caused by Ants Performance Profiler</title>
        <description>&lt;p&gt;One of our test boxes was suffering from IIS hangs after an application pool recycle - generally after either deploying an WSP or modifying a web.config.
The hang was accompanied by an error message in the Application event log: “Failed to CoCreate profiler”.&lt;/p&gt;

&lt;p&gt;The server had Ants Performance Profiler on it and I’d noticed the same error on my Dev box after using the same software, so suspected a culprit.&lt;/p&gt;

&lt;p&gt;The Redgate articles I found suggested initially checking the permissions on the installation directories to ensure that the app pool accounts have read permissions.  This did not help our problem.&lt;/p&gt;

&lt;p&gt;The second one suggested deleting the Environment value under the HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W3SVC key.  (This contradicts the MSDN article below, but after backing up the key I tried it anyway.)&lt;/p&gt;

&lt;p&gt;I expect that in some circumstances this Environment value can contain more items than just those of a troublesome app, so should be done with care.  Anyway, it fixed our issue, so all’s good!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blogs.msdn.com/b/dougste/archive/2009/12/30/failed-to-cocreate-profiler.aspx&quot; title=&quot;Failed to CoCreate Profiler - MSDN&quot;&gt;http://blogs.msdn.com/b/dougste/archive/2009/12/30/failed-to-cocreate-profiler.aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://documentation.red-gate.com/display/APP8/IIS+stops+working+after+profiling+web+applications&quot; title=&quot;IIS stops working after profiling web applications - redgate&quot;&gt;http://documentation.red-gate.com/display/APP8/IIS+stops+working+after+profiling+web+applications&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Sep 2014 00:00:00 +0000</pubDate>
        <link>http://staging.alt-pgdn.com/iis/2014/09/05/fixing-iis-hangs-caused-by-ants.html</link>
        <guid isPermaLink="true">http://staging.alt-pgdn.com/iis/2014/09/05/fixing-iis-hangs-caused-by-ants.html</guid>
        
        
        <category>iis</category>
        
      </item>
    
      <item>
        <title>Zipping files in MSBuild using Community Tasks</title>
        <description>&lt;p&gt;We use this for packaging up PDB files for each release.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;  &amp;lt;UsingTask AssemblyName=&quot;MSBuild.Community.Tasks&quot; TaskName=&quot;MSBuild.Community.Tasks.Zip&quot; /&amp;gt;
  &amp;lt;Target Name=&quot;ZipPDBs&quot;&amp;gt;
    &amp;lt;Message Text=&quot;Zipping PDB files in $(BasePath)&quot; /&amp;gt;
    &amp;lt;CreateItem Include=&quot;$(BasePath)\*.pdb&quot; &amp;gt;
        &amp;lt;Output ItemName=&quot;PDBFiles&quot; TaskParameters=&quot;Include&quot; /&amp;gt;
    &amp;lt;/CreateItem&amp;gt;
    &amp;lt;MSBuildCommunity.Tasks.Zip ZipFileName=&quot;$(BasePath)\pdbs-$(VersionNumber).zip&quot; WorkingDirectory=&quot;$(BasePath)&quot; Files=&quot;@PDBFiles&quot; /&amp;gt;
  &amp;lt;/Target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$(BasePath) and $(VersionNumber) need to be defined elsewhere.&lt;/p&gt;

&lt;p&gt;MSBuild.Community.Tasks.dll needs to be accessible.&lt;/p&gt;

</description>
        <pubDate>Fri, 04 Apr 2014 00:00:00 +0000</pubDate>
        <link>http://staging.alt-pgdn.com/build/2014/04/04/zip-files-in-msbuild.html</link>
        <guid isPermaLink="true">http://staging.alt-pgdn.com/build/2014/04/04/zip-files-in-msbuild.html</guid>
        
        
        <category>build</category>
        
      </item>
    
      <item>
        <title>Configuring Windows to enable Octopress builds</title>
        <description>&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Install Chocolatey from &lt;a href=&quot;https://chocolatey.org/&quot;&gt;https://chocolatey.org/&lt;/a&gt; (Not strictly necessary, but it is a handy tool)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install Git &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
    cinst git
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Install Ruby 1.9.3 from &lt;a href=&quot;http://rubyinstaller.org/downloads/&quot; title=&quot;Ruby Installer&quot;&gt;http://rubyinstaller.org/downloads/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install Ruby Devkit &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
cinst ruby.devkit
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Clone Octopress locally (“git clone https://github.com/imathis/octopress ./octopress” from command line)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To ensure that all the Gem dependencies are correctly installed:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;```
    cd octopress&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install bundler

bundle install ```
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Put content in the source/_posts folder&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To build the site:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;
    rake generate
&lt;/code&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 05 Jan 2014 00:00:00 +0000</pubDate>
        <link>http://staging.alt-pgdn.com/blog/2014/01/05/configuring-octopress-builds.html</link>
        <guid isPermaLink="true">http://staging.alt-pgdn.com/blog/2014/01/05/configuring-octopress-builds.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Setting Assembly File Version using MSBuild Extensions</title>
        <description>&lt;p&gt;Excellent write up on this - used it and it worked:&lt;/p&gt;

&lt;p&gt;https://mikefourie.wordpress.com/2009/11/07/versioning-code-in-tfs-revised/&lt;/p&gt;

&lt;p&gt;MSBuild Extensions: &lt;a href=&quot;http://msbuildextensionpack.codeplex.com/releases/view/105659&quot;&gt;http://msbuildextensionpack.codeplex.com/releases/view/105659&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 12 Dec 2013 00:00:00 +0000</pubDate>
        <link>http://staging.alt-pgdn.com/build/2013/12/12/team-build-set-version.html</link>
        <guid isPermaLink="true">http://staging.alt-pgdn.com/build/2013/12/12/team-build-set-version.html</guid>
        
        
        <category>build</category>
        
      </item>
    
      <item>
        <title>SQL Server Aliases</title>
        <description>&lt;p&gt;Use cliconfg.exe to set up a SQL server alias as per:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blogs.technet.com/b/meamcs/archive/2013/01/22/creating-a-sql-server-alias-using-the-sql-server-client-network-utility.aspx&quot;&gt;http://blogs.technet.com/b/meamcs/archive/2013/01/22/creating-a-sql-server-alias-using-the-sql-server-client-network-utility.aspx&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 07 Aug 2013 00:00:00 +0000</pubDate>
        <link>http://staging.alt-pgdn.com/2013/08/07/sql-server-aliases.html</link>
        <guid isPermaLink="true">http://staging.alt-pgdn.com/2013/08/07/sql-server-aliases.html</guid>
        
        
      </item>
    
      <item>
        <title>Don&#39;t Use OOB SharePoint Themes</title>
        <description>&lt;p&gt;MOSS 2007 ships a number of default themes. There are a number of issues with these regarding enabling caching for CSS and images used in the themes, supporting the modification of these artefacts without requiring the theme to be updated, but also around the validity of the CSS itself.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;I will cover the caching and updating points in another post (although the key elements behind this are covered in &lt;a href=&quot;http://blog.sharepointexperience.com/2008/01/sharepoint-2007-design-tip-import-your-css-for-sharepoint-themes/&quot; title=&quot;Heather Solomon&#39;s post&quot;&gt;Heather Solomon’s post&lt;/a&gt;. This post flags up the issue of broken CSS one of the side effects of which is extra HTTP requests which will never be served.&lt;/p&gt;

&lt;p&gt;I’m going to cut to the chase and advise that you do not permit the out of the box themes to be used. (Not that anyone is still deploying new 2007 installations are they?) I’m going to pick on a few specific problems, but they are indicative of MOSS themes as a whole.&lt;/p&gt;

&lt;h3 id=&quot;not-cacheable&quot;&gt;Not Cacheable&lt;/h3&gt;

&lt;p&gt;Check out Fiddler when you make a request to a theme enabled site. Every request brings down a raft of images associated with the theme. Why no browser caching?
The theme files (theme.css, mossextension.css and all the associated images) are served with a Cache-Control header set to “private,max-age=0”. This means that every time you request those resources your browser will head all the way back to the server to check whether they’ve been updated.&lt;/p&gt;

&lt;h3 id=&quot;stored-in-the-content-database&quot;&gt;Stored In The Content Database&lt;/h3&gt;

&lt;p&gt;When you apply a theme to a SharePoint site, it grabs all the styles and images in the folder that defines the theme and stores them in the site (i.e. in the content database) under the “_themes” folder.&lt;/p&gt;

&lt;p&gt;This has the side effect of making it difficult to make any changes to themes which have been applied, but also means that there is a lot of database access just to serve out a set of static image and css files.&lt;/p&gt;

&lt;h3 id=&quot;broken-links---bad-css-and-missing-images&quot;&gt;Broken Links - Bad CSS and Missing Images&lt;/h3&gt;

&lt;p&gt;The Simple theme contains two references to ‘http://localhost/topnavselected_simple.gif’. This will never be resolved which results in 404 errors when requesting pages with that theme applied.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4121350.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The Verdant theme has links to the ‘siteTitleBKGD_vintage.jpg’ image. Sadly, there’s a gif, but no jpg by that name in this theme.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4121601.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;There are further problems than this, but if you’ve got performance issues on your MOSS farm and you have themes enabled, consider what impact they have.&lt;/p&gt;

&lt;p&gt;I’ve looked at the theme definitions on 2010 and they seem similarly afflicted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next post: How to fix your themes!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Aug 2013 00:00:00 +0000</pubDate>
        <link>http://staging.alt-pgdn.com/sharepoint/2013/08/01/sharepoint-themes.html</link>
        <guid isPermaLink="true">http://staging.alt-pgdn.com/sharepoint/2013/08/01/sharepoint-themes.html</guid>
        
        
        <category>sharepoint</category>
        
      </item>
    
  </channel>
</rss>
